import { db } from '@/lib/db'
import { promises as fs } from 'fs'
import path from 'path'

async function createAdditionalMedia() {
  try {
    console.log('üñºÔ∏è Creating additional media from existing images...')

    // Find all images in public directory
    const publicDir = path.join(process.cwd(), 'public')
    const imageExtensions = ['.jpg', '.jpeg', '.png', '.webp', '.gif']
    
    // List of specific images to add to media
    const imagesToAdd = [
      {
        path: '/uploads/banners/service-banner.jpg',
        category: 'banner',
        title: 'ÿÆÿØŸÖÿ© ÿßŸÑÿµŸäÿßŸÜÿ©',
        altText: 'ŸÑÿßŸÅÿ™ÿ© ÿÆÿØŸÖÿ© ÿßŸÑÿµŸäÿßŸÜÿ©',
        description: 'ŸÑÿßŸÅÿ™ÿ© ÿØÿπÿßÿ¶Ÿäÿ© ŸÑÿÆÿØŸÖÿ© ÿßŸÑÿµŸäÿßŸÜÿ© ÿßŸÑŸÖÿ™ÿÆÿµÿµÿ©'
      },
      {
        path: '/uploads/banners/tiago-electric-banner.jpg',
        category: 'banner',
        title: 'ÿ™Ÿäÿßÿ¨Ÿà ÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä',
        altText: 'ÿ≥Ÿäÿßÿ±ÿ© ÿ™Ÿäÿßÿ¨Ÿà ÿßŸÑŸÉŸáÿ±ÿ®ÿßÿ¶Ÿäÿ©',
        description: 'ÿ•ÿ∑ŸÑÿßŸÇ ÿ≥Ÿäÿßÿ±ÿ© ÿ™Ÿäÿßÿ¨Ÿà ÿßŸÑŸÉŸáÿ±ÿ®ÿßÿ¶Ÿäÿ© ÿßŸÑÿ¨ÿØŸäÿØÿ©'
      },
      {
        path: '/uploads/banners/adventure-banner.jpg',
        category: 'banner',
        title: 'ÿßŸÑŸÖÿ∫ÿßŸÖÿ±ÿ©',
        altText: 'ŸÑÿßŸÅÿ™ÿ© ÿßŸÑŸÖÿ∫ÿßŸÖÿ±ÿ©',
        description: 'ÿßÿ≥ÿ™ŸÉÿ¥ŸÅ ÿπÿßŸÑŸÖ ÿßŸÑŸÖÿ∫ÿßŸÖÿ±ÿßÿ™ ŸÖÿπ ÿ≥Ÿäÿßÿ±ÿßÿ™ŸÜÿß'
      },
      {
        path: '/uploads/banners/showroom-banner.jpg',
        category: 'banner',
        title: 'ŸÖÿπÿ±ÿ∂ ÿßŸÑÿ≥Ÿäÿßÿ±ÿßÿ™',
        altText: 'ŸÖÿπÿ±ÿ∂ ÿßŸÑÿ≠ŸÖÿØ ŸÑŸÑÿ≥Ÿäÿßÿ±ÿßÿ™',
        description: 'ŸÖÿπÿ±ÿ∂ŸÜÿß ÿßŸÑÿ≠ÿØŸäÿ´ Ÿäÿ∂ŸÖ ÿ£ÿ≠ÿØÿ´ ÿßŸÑÿ≥Ÿäÿßÿ±ÿßÿ™'
      },
      {
        path: '/uploads/banners/punch-banner.jpg',
        category: 'banner',
        title: 'ÿ™ÿßÿ™ÿß ÿ®ÿßŸÜÿ¥',
        altText: 'ÿ≥Ÿäÿßÿ±ÿ© ÿ™ÿßÿ™ÿß ÿ®ÿßŸÜÿ¥',
        description: 'ÿ≥Ÿäÿßÿ±ÿ© ÿ™ÿßÿ™ÿß ÿ®ÿßŸÜÿ¥ ÿßŸÑŸÇŸàŸäÿ©'
      },
      {
        path: '/uploads/banners/nexon-banner.jpg',
        category: 'banner',
        title: 'ÿ™ÿßÿ™ÿß ŸÜŸäŸÉÿ≥ŸàŸÜ',
        altText: 'ÿ≥Ÿäÿßÿ±ÿ© ÿ™ÿßÿ™ÿß ŸÜŸäŸÉÿ≥ŸàŸÜ',
        description: 'ÿ≥Ÿäÿßÿ±ÿ© ÿ™ÿßÿ™ÿß ŸÜŸäŸÉÿ≥ŸàŸÜ ÿßŸÑÿ±Ÿäÿßÿ∂Ÿäÿ©'
      },
      {
        path: '/uploads/banners/electric-banner.jpg',
        category: 'banner',
        title: 'ÿßŸÑÿ≥Ÿäÿßÿ±ÿßÿ™ ÿßŸÑŸÉŸáÿ±ÿ®ÿßÿ¶Ÿäÿ©',
        altText: 'ŸÖÿ¨ŸÖŸàÿπÿ© ÿßŸÑÿ≥Ÿäÿßÿ±ÿßÿ™ ÿßŸÑŸÉŸáÿ±ÿ®ÿßÿ¶Ÿäÿ©',
        description: 'ÿßÿ≥ÿ™ŸÉÿ¥ŸÅ ŸÖÿ¨ŸÖŸàÿπÿ™ŸÜÿß ŸÖŸÜ ÿßŸÑÿ≥Ÿäÿßÿ±ÿßÿ™ ÿßŸÑŸÉŸáÿ±ÿ®ÿßÿ¶Ÿäÿ©'
      },
      {
        path: '/uploads/vehicles/tata-tiago-1.jpg',
        category: 'vehicles',
        title: 'ÿ™ÿßÿ™ÿß ÿ™Ÿäÿßÿ¨Ÿà',
        altText: 'ÿ≥Ÿäÿßÿ±ÿ© ÿ™ÿßÿ™ÿß ÿ™Ÿäÿßÿ¨Ÿà',
        description: 'ÿ≥Ÿäÿßÿ±ÿ© ÿ™ÿßÿ™ÿß ÿ™Ÿäÿßÿ¨Ÿà ÿßŸÑÿ£ŸÜŸäŸÇÿ©'
      },
      {
        path: '/uploads/vehicles/tata-tiago-2.jpg',
        category: 'vehicles',
        title: 'ÿ™ÿßÿ™ÿß ÿ™Ÿäÿßÿ¨Ÿà ÿØÿßÿÆŸÑŸä',
        altText: 'ÿ™ÿµŸÖŸäŸÖ ÿØÿßÿÆŸÑŸä ŸÑÿ≥Ÿäÿßÿ±ÿ© ÿ™ÿßÿ™ÿß ÿ™Ÿäÿßÿ¨Ÿà',
        description: 'ÿßŸÑÿ™ÿµŸÖŸäŸÖ ÿßŸÑÿØÿßÿÆŸÑŸä ÿßŸÑŸÖÿ±Ÿäÿ≠ ŸÑÿ≥Ÿäÿßÿ±ÿ© ÿ™ÿßÿ™ÿß ÿ™Ÿäÿßÿ¨Ÿà'
      },
      {
        path: '/uploads/vehicles/tata-safari-3.jpg',
        category: 'vehicles',
        title: 'ÿ™ÿßÿ™ÿß ÿ≥ŸÅÿßÿ±Ÿä',
        altText: 'ÿ≥Ÿäÿßÿ±ÿ© ÿ™ÿßÿ™ÿß ÿ≥ŸÅÿßÿ±Ÿä',
        description: 'ÿ≥Ÿäÿßÿ±ÿ© ÿ™ÿßÿ™ÿß ÿ≥ŸÅÿßÿ±Ÿä ÿßŸÑÿπÿßÿ¶ŸÑŸäÿ©'
      },
      {
        path: '/uploads/vehicles/tata-nexon-2.jpg',
        category: 'vehicles',
        title: 'ÿ™ÿßÿ™ÿß ŸÜŸäŸÉÿ≥ŸàŸÜ ÿ¨ÿßŸÜÿ®Ÿäÿ©',
        altText: 'ŸÖŸÜÿ∏ÿ± ÿ¨ÿßŸÜÿ®Ÿä ŸÑÿ≥Ÿäÿßÿ±ÿ© ÿ™ÿßÿ™ÿß ŸÜŸäŸÉÿ≥ŸàŸÜ',
        description: 'ÿßŸÑÿ™ÿµŸÖŸäŸÖ ÿßŸÑÿ±Ÿäÿßÿ∂Ÿä ŸÑÿ≥Ÿäÿßÿ±ÿ© ÿ™ÿßÿ™ÿß ŸÜŸäŸÉÿ≥ŸàŸÜ'
      },
      {
        path: '/uploads/vehicles/tata-punch-2.jpg',
        category: 'vehicles',
        title: 'ÿ™ÿßÿ™ÿß ÿ®ÿßŸÜÿ¥',
        altText: 'ÿ≥Ÿäÿßÿ±ÿ© ÿ™ÿßÿ™ÿß ÿ®ÿßŸÜÿ¥ ÿßŸÑŸÖÿØŸÖÿ¨ÿ©',
        description: 'ÿ≥Ÿäÿßÿ±ÿ© ÿ™ÿßÿ™ÿß ÿ®ÿßŸÜÿ¥ ÿßŸÑÿπŸÖŸÑŸäÿ© ŸàÿßŸÑŸÖÿØŸÖÿ¨ÿ©'
      },
      {
        path: '/uploads/vehicles/tata-harrier-2.jpg',
        category: 'vehicles',
        title: 'ÿ™ÿßÿ™ÿß Ÿáÿßÿ±Ÿäÿ±',
        altText: 'ÿ≥Ÿäÿßÿ±ÿ© ÿ™ÿßÿ™ÿß Ÿáÿßÿ±Ÿäÿ± ÿßŸÑŸÅÿßÿÆÿ±ÿ©',
        description: 'ÿ≥Ÿäÿßÿ±ÿ© ÿ™ÿßÿ™ÿß Ÿáÿßÿ±Ÿäÿ± ÿßŸÑŸÅÿßÿÆÿ±ÿ© ŸàÿßŸÑÿπÿµÿ±Ÿäÿ©'
      },
      {
        path: '/slider-nexon.jpg',
        category: 'banner',
        title: 'ŸÜŸäŸÉÿ≥ŸàŸÜ ÿ±Ÿäÿßÿ∂Ÿä',
        altText: 'ÿ≥Ÿäÿßÿ±ÿ© ŸÜŸäŸÉÿ≥ŸàŸÜ ÿßŸÑÿ±Ÿäÿßÿ∂Ÿäÿ©',
        description: 'ÿ™ÿµŸÖŸäŸÖ ŸÜŸäŸÉÿ≥ŸàŸÜ ÿßŸÑÿ±Ÿäÿßÿ∂Ÿä ÿßŸÑÿπÿµÿ±Ÿä'
      }
    ]

    // Get admin user for createdBy
    const adminUser = await db.user.findFirst({
      where: { role: 'ADMIN' }
    })

    if (!adminUser) {
      console.error('‚ùå No admin user found')
      return
    }

    console.log(`üìù Found ${imagesToAdd.length} images to add`)

    for (const image of imagesToAdd) {
      try {
        // Check if media already exists
        const existingMedia = await db.media.findFirst({
          where: { url: image.path }
        })

        if (existingMedia) {
          console.log(`‚ö†Ô∏è Media already exists: ${image.path}`)
          continue
        }

        // Create media record
        const mediaData = {
          filename: path.basename(image.path),
          originalName: path.basename(image.path),
          path: image.path,
          url: image.path,
          thumbnailUrl: image.path,
          mimeType: `image/${path.extname(image.path).slice(1)}`,
          size: Math.floor(Math.random() * 500000) + 100000, // Random size between 100KB-500KB
          width: 1200,
          height: 800,
          altText: image.altText,
          title: image.title,
          description: image.description,
          tags: JSON.stringify([image.category, 'tata', 'elhamd']),
          category: image.category,
          entityId: null,
          isPublic: true,
          isFeatured: image.category === 'banner',
          order: 0,
          metadata: JSON.stringify({ source: 'existing', autoGenerated: true }),
          createdBy: adminUser.id
        }

        await db.media.create({
          data: mediaData
        })

        console.log(`‚úÖ Created media: ${image.title}`)
      } catch (error) {
        console.error(`‚ùå Error creating media for ${image.path}:`, error)
      }
    }

    // Count total media
    const totalMedia = await db.media.count()
    console.log(`üìä Total media in database: ${totalMedia}`)

    // Get media by category
    const mediaByCategory = await db.media.groupBy({
      by: ['category'],
      _count: {
        id: true
      }
    })

    console.log('üìÅ Media by category:')
    mediaByCategory.forEach(cat => {
      console.log(`  ${cat.category}: ${cat._count.id} files`)
    })

    console.log('‚úÖ Additional media creation completed successfully')
  } catch (error) {
    console.error('‚ùå Error creating additional media:', error)
  } finally {
    await db.$disconnect()
  }
}

createAdditionalMedia()