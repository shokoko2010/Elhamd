// Prisma schema for Vercel deployment with PostgreSQL
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Add this for connection pooling
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_POOLING")
}

// Keep all your existing models here
model User {
  id                String          @id @default(cuid())
  email             String          @unique
  password          String?
  name              String?
  role              UserRole        @default(CUSTOMER)
  phone             String?
  isActive          Boolean         @default(true)
  emailVerified     Boolean         @default(false)
  lastLoginAt       DateTime?
  securitySettings  Json?
  segment           CustomerSegment @default(CUSTOMER)
  status            String          @default("active")
  branchId          String?
  roleTemplateId    String?
  customPermissions Json?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  // Relations
  testDriveBookings      TestDriveBooking[]
  serviceBookings        ServiceBooking[]
  permissions            UserPermission[]
  securityLogs           SecurityLog[]
  assignedTasks          Task[]              @relation("TaskAssignee")
  createdTasks           Task[]              @relation("TaskAssigner")
  customerTasks          Task[]              @relation("TaskCustomer")
  taskComments           TaskComment[]
  bookings               Booking[]
  performanceMetrics     PerformanceMetric[]
  organizedEvents        CalendarEvent[]
  customerProfile        CustomerProfile?
  crmInteractions        CRMInteraction[]
  invoices               Invoice[]
  customerQuotations     Quotation[]         @relation("CustomerQuotations")
  quotations             Quotation[]         @relation("QuotationCreator")
  transactions           Transaction[]
  feedback               CustomerFeedback[]
  branch                 Branch?             @relation(fields: [branchId], references: [id])
  managedBranch          Branch?             @relation("BranchManager")
  branchPermissions      BranchPermission[]
  transferRequests       BranchTransfer[]    @relation("TransferRequester")
  approvedTransfers      BranchTransfer[]    @relation("TransferApprover")
  createdBudgets         BranchBudget[]      @relation("BudgetCreator")
  approvedBudgets        BranchBudget[]      @relation("BudgetApprover")
  roleTemplate           RoleTemplate?       @relation(fields: [roleTemplateId], references: [id])
  activityLogs           ActivityLog[]
  purchaseOrders         PurchaseOrder[]     @relation("PurchaseOrderCreator")
  approvedPurchaseOrders PurchaseOrder[]     @relation("PurchaseOrderApprover")

  // Customer Service Relations
  supportTickets        SupportTicket[]
  assignedTickets       SupportTicket[]        @relation("TicketAssignee")
  createdTickets        SupportTicket[]        @relation("TicketAssigner")
  resolvedTickets       SupportTicket[]        @relation("TicketResolver")
  ticketComments        TicketComment[]
  ticketTimeline        TicketTimeline[]
  serviceEvaluations    ServiceEvaluation[]    @relation("EvaluationCustomer")
  reviewedEvaluations   ServiceEvaluation[]    @relation("EvaluationReviewer")
  complaints            Complaint[]
  assignedComplaints    Complaint[]            @relation("ComplaintAssignee")
  createdComplaints     Complaint[]            @relation("ComplaintAssigner")
  resolvedComplaints    Complaint[]            @relation("ComplaintResolver")
  complaintFollowUps    ComplaintFollowUp[]
  knowledgeBaseArticles KnowledgeBaseArticle[] @relation("ArticleAuthor")
  reviewedArticles      KnowledgeBaseArticle[] @relation("ArticleReviewer")
  knowledgeBaseRatings  KnowledgeBaseRating[]

  // Marketing and Sales Relations
  marketingCampaigns MarketingCampaign[] @relation("CampaignCreator")
  approvedCampaigns  MarketingCampaign[] @relation("CampaignApprover")
  campaignMembers    CampaignMember[]    @relation("CampaignMemberUser")
  leads              Lead[]              @relation("LeadAssignee")
  createdLeads       Lead[]              @relation("LeadAssigner")
  leadActivities     LeadActivity[]      @relation("LeadActivityUser")
  salesFunnels       SalesFunnel[]
  salesTargets       SalesTarget[]

  // Accounting System Relations
  createdJournalEntries  JournalEntry[]      @relation("JournalEntryCreator")
  approvedJournalEntries JournalEntry[]      @relation("JournalEntryApprover")
  createdPayrollRecords  PayrollRecord[]     @relation("PayrollCreator")
  approvedPayrollRecords PayrollRecord[]     @relation("PayrollApprover")
  performanceReviews     PerformanceReview[] @relation("PerformanceReviewer")

  // Human Resources System Relations
  employeeRecord        Employee?      @relation("EmployeeRecord")
  approvedLeaveRequests LeaveRequest[] @relation("LeaveApprover")

  // Contract and Warranty System Relations
  createdContracts       Contract[]      @relation("ContractCreator")
  approvedContracts      Contract[]      @relation("ContractApprover")
  createdWarrantyClaims  WarrantyClaim[] @relation("WarrantyClaimCreator")
  approvedWarrantyClaims WarrantyClaim[] @relation("WarrantyClaimApprover")
  customerContracts      Contract[]      @relation("CustomerContracts")
  warrantyClaims         WarrantyClaim[] @relation("WarrantyClaimCustomer")

  // Maintenance System Relations
  createdMaintenanceSchedules MaintenanceSchedule[]
  createdMaintenanceRecords   MaintenanceRecord[]
  createdMaintenanceReminders MaintenanceReminder[]
  createdMaintenanceParts     MaintenancePart[]

  // Insurance System Relations
  createdInsuranceCompanies InsuranceCompany[]
  createdInsurancePolicies  InsurancePolicy[]  @relation("InsurancePolicyCreator")
  approvedInsurancePolicies InsurancePolicy[]  @relation("InsurancePolicyApprover")
  createdInsuranceClaims    InsuranceClaim[]   @relation("InsuranceClaimCreator")
  assignedInsuranceClaims   InsuranceClaim[]   @relation("InsuranceClaimAssignee")
  customerInsurancePolicies InsurancePolicy[]  @relation("CustomerInsurancePolicies")
  customerInsuranceClaims   InsuranceClaim[]   @relation("CustomerInsuranceClaims")
  createdInsurancePayments  InsurancePayment[] @relation("InsurancePaymentCreator")
  approvedInsurancePayments InsurancePayment[] @relation("InsurancePaymentApprover")

  // Tax Reporting System Relations
  createdTaxRecords  TaxRecord[] @relation("TaxRecordCreator")
  approvedTaxRecords TaxRecord[] @relation("TaxRecordApprover")

  // Commerce System Relations
  createdProducts      Product[]         @relation("ProductCreator")
  orders              Order[]           @relation("OrderCustomer")
  createdOrders       Order[]           @relation("OrderCreator")
  productReviews      ProductReview[]    @relation("ProductReviewCustomer")
  approvedReviews      ProductReview[]    @relation("ProductReviewApprover")
  createdPromotions   Promotion[]       @relation("PromotionCreator")

  @@index([email])
  @@index([role])
  @@index([isActive])
  @@index([branchId])
  @@map("users")
}

model Branch {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  address     String?
  phone       String?
  email       String?
  managerId   String?
  isActive    Boolean  @default(true)
  openingDate DateTime
  currency    String   @default("EGP")
  timezone    String   @default("Africa/Cairo")
  settings    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users         User[]
  vehicles      Vehicle[]
  invoices      Invoice[]
  quotations    Quotation[]
  payments      Payment[]
  transactions  Transaction[]
  inventory     InventoryItem[]
  warehouses    Warehouse[]
  manager       User?              @relation("BranchManager", fields: [managerId], references: [id])
  permissions   BranchPermission[]
  fromTransfers BranchTransfer[]   @relation("FromBranch")
  toTransfers   BranchTransfer[]   @relation("ToBranch")
  budgets       BranchBudget[]

  // Accounting System Relations
  journalEntries JournalEntry[]
  employees      Employee[]

  // Contract and Warranty System Relations
  contracts Contract[]

  // Insurance System Relations
  insuranceCompanies InsuranceCompany[]

  // Tax Reporting System Relations
  taxRecords TaxRecord[]

  // Customer Service Relations
  supportTickets         SupportTicket[]
  complaints             Complaint[]
  customerServiceMetrics CustomerServiceMetric[]

  // Marketing and Sales Relations
  marketingCampaigns MarketingCampaign[]
  leads              Lead[]
  salesFunnels       SalesFunnel[]
  salesTargets       SalesTarget[]
  marketingMetrics   MarketingMetric[]

  @@unique([managerId])
  @@index([code])
  @@index([isActive])
  @@map("branches")
}

model Vehicle {
  id           String           @id @default(cuid())
  make         String
  model        String
  year         Int
  price        Float
  stockNumber  String           @unique
  vin          String?          @unique
  description  String?
  category     VehicleCategory
  fuelType     FuelType
  transmission TransmissionType
  mileage      Int?
  color        String?
  status       VehicleStatus    @default(AVAILABLE)
  featured     Boolean          @default(false)
  branchId     String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  images            VehicleImage[]
  specifications    VehicleSpecification[]
  pricing           VehiclePricing?
  testDriveBookings TestDriveBooking[]
  serviceBookings   ServiceBooking[]
  bookings          Booking[]
  opportunities     Opportunity[]
  branch            Branch?            @relation(fields: [branchId], references: [id])

  // Contract and Warranty System Relations
  contracts      Contract[]
  warranties     Warranty[]
  warrantyClaims WarrantyClaim[]

  // Maintenance System Relations
  maintenanceSchedules MaintenanceSchedule[]
  maintenanceRecords   MaintenanceRecord[]
  maintenanceReminders MaintenanceReminder[]

  // Insurance System Relations
  insurancePolicies InsurancePolicy[]
  insuranceClaims   InsuranceClaim[]

  @@index([make, model])
  @@index([status])
  @@index([category])
  @@map("vehicles")
}

model VehicleImage {
  id        String   @id @default(cuid())
  vehicleId String
  imageUrl  String
  altText   String?
  isPrimary Boolean  @default(false)
  order     Int      @default(0)
  createdAt DateTime @default(now())

  vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@map("vehicle_images")
}

model VehicleSpecification {
  id        String                              @id @default(cuid())
  vehicleId String
  key       String
  label     String
  value     String
  category  VehicleSpecCategory                 @default(ENGINE)
  createdAt DateTime                            @default(now())
  updatedAt DateTime                            @updatedAt

  vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@map("vehicle_specifications")
}

model VehiclePricing {
  id                  String   @id @default(cuid())
  vehicleId           String   @unique
  basePrice           Float
  discountPrice       Float?
  discountPercentage  Float?
  taxes               Float    @default(0)
  fees                Float    @default(0)
  totalPrice          Float
  currency            String   @default("SAR")
  hasDiscount         Boolean  @default(false)
  discountExpires     DateTime?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@map("vehicle_pricing")
}

enum VehicleSpecCategory {
  ENGINE
  EXTERIOR
  INTERIOR
  SAFETY
  TECHNOLOGY
}

model TestDriveBooking {
  id         String        @id @default(cuid())
  customerId String
  vehicleId  String
  date       DateTime
  timeSlot   String
  status     BookingStatus @default(PENDING)
  notes      String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  customer User    @relation(fields: [customerId], references: [id])
  vehicle  Vehicle @relation(fields: [vehicleId], references: [id])

  @@map("test_drive_bookings")
}

model ServiceType {
  id          String          @id @default(cuid())
  name        String
  description String?
  duration    Int
  price       Float?
  category    ServiceCategory
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  serviceBookings ServiceBooking[]
  bookings        Booking[]

  @@map("service_types")
}

model ServiceBooking {
  id            String        @id @default(cuid())
  customerId    String
  vehicleId     String?
  serviceTypeId String
  timeSlotId    String?
  date          DateTime
  timeSlot      String
  status        BookingStatus @default(PENDING)
  notes         String?
  totalPrice    Float?
  paymentStatus PaymentStatus @default(PENDING)
  paymentId     String?
  reminderSent  Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  customer    User        @relation(fields: [customerId], references: [id])
  vehicle     Vehicle?    @relation(fields: [vehicleId], references: [id])
  serviceType ServiceType @relation(fields: [serviceTypeId], references: [id])
  slot        TimeSlot?   @relation(fields: [timeSlotId], references: [id])
  payments    Payment[]

  @@map("service_bookings")
}

model Permission {
  id          String             @id @default(cuid())
  name        String             @unique
  description String?
  category    PermissionCategory
  isActive    Boolean            @default(true)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  userPermissions         UserPermission[]
  roleTemplatePermissions RoleTemplatePermission[]

  @@map("permissions")
}

model RoleTemplate {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  role        UserRole
  permissions Json
  isActive    Boolean  @default(true)
  isSystem    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  roleTemplatePermissions RoleTemplatePermission[]
  users                   User[]

  @@map("role_templates")
}

model RoleTemplatePermission {
  id           String   @id @default(cuid())
  templateId   String
  permissionId String
  createdAt    DateTime @default(now())

  template   RoleTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  permission Permission   @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([templateId, permissionId])
  @@map("role_template_permissions")
}

model UserPermission {
  id           String    @id @default(cuid())
  userId       String
  permissionId String
  grantedBy    String?
  grantedAt    DateTime  @default(now())
  expiresAt    DateTime?

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([userId, permissionId])
  @@map("user_permissions")
}

model TimeSlot {
  id        String   @id @default(cuid())
  date      DateTime
  startTime String
  endTime   String
  isBooked  Boolean  @default(false)
  createdAt DateTime @default(now())

  serviceBookings ServiceBooking[]

  @@unique([date, startTime])
  @@map("time_slots")
}

model SecurityLog {
  id        String      @id @default(cuid())
  userId    String?
  action    String
  ipAddress String?
  userAgent String?
  details   Json?
  severity  LogSeverity @default(INFO)
  createdAt DateTime    @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@map("security_logs")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(PENDING)
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime?
  assigneeId  String?
  assignerId  String?
  customerId  String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  assignee User? @relation("TaskAssignee", fields: [assigneeId], references: [id])
  assigner User? @relation("TaskAssigner", fields: [assignerId], references: [id])
  customer User? @relation("TaskCustomer", fields: [customerId], references: [id])
  comments TaskComment[]

  @@map("tasks")
}

model TaskComment {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  content   String
  createdAt DateTime @default(now())

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])

  @@map("task_comments")
}

model Booking {
  id          String        @id @default(cuid())
  customerId  String
  type        BookingType
  vehicleId   String?
  serviceId   String?
  date        DateTime
  timeSlot    String
  status      BookingStatus @default(PENDING)
  totalPrice  Float?
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  customer  User         @relation(fields: [customerId], references: [id])
  vehicle   Vehicle?     @relation(fields: [vehicleId], references: [id])
  service   ServiceType? @relation(fields: [serviceId], references: [id])

  @@map("bookings")
}

model PerformanceMetric {
  id        String   @id @default(cuid())
  userId    String
  metric    String
  value     Float
  date      DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("performance_metrics")
}

model CalendarEvent {
  id          String    @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  organizerId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  organizer User @relation(fields: [organizerId], references: [id])

  @@map("calendar_events")
}

model CustomerProfile {
  id          String           @id @default(cuid())
  userId      String           @unique
  dateOfBirth DateTime?
  address     String?
  city        String?
  country     String?
  postalCode  String?
  preferences Json?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("customer_profiles")
}

model CRMInteraction {
  id          String            @id @default(cuid())
  customerId  String
  type        InteractionType
  title       String
  description String?
  date        DateTime
  outcome     String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  customer User @relation(fields: [customerId], references: [id])

  @@map("crm_interactions")
}

model Invoice {
  id          String        @id @default(cuid())
  customerId  String
  branchId    String?
  number      String        @unique
  amount      Float
  status      InvoiceStatus @default(PENDING)
  issuedAt    DateTime      @default(now())
  dueDate     DateTime?
  paidAt      DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  customer User    @relation(fields: [customerId], references: [id])
  branch   Branch? @relation(fields: [branchId], references: [id])

  @@map("invoices")
}

model Quotation {
  id          String        @id @default(cuid())
  customerId  String
  creatorId   String
  vehicleId   String?
  amount      Float
  status      QuotationStatus @default(PENDING)
  validUntil  DateTime
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  customer User    @relation("CustomerQuotations", fields: [customerId], references: [id])
  creator  User    @relation("QuotationCreator", fields: [creatorId], references: [id])
  vehicle  Vehicle? @relation(fields: [vehicleId], references: [id])

  @@map("quotations")
}

model Transaction {
  id          String           @id @default(cuid())
  customerId  String
  branchId    String?
  amount      Float
  currency    String           @default("EGP")
  type        TransactionType
  status      TransactionStatus @default(PENDING)
  reference   String?
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  customer User    @relation(fields: [customerId], references: [id])
  branch   Branch? @relation(fields: [branchId], references: [id])

  @@map("transactions")
}

model CustomerFeedback {
  id        String   @id @default(cuid())
  customerId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  customer User @relation(fields: [customerId], references: [id])

  @@map("customer_feedback")
}

model BranchPermission {
  id        String   @id @default(cuid())
  userId    String
  branchId  String
  role      String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  branch Branch @relation(fields: [branchId], references: [id])

  @@unique([userId, branchId])
  @@map("branch_permissions")
}

model BranchTransfer {
  id          String            @id @default(cuid())
  fromBranchId String
  toBranchId   String
  requesterId  String
  approverId   String?
  amount       Float
  description  String?
  status       TransferStatus   @default(PENDING)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  fromBranch Branch @relation("FromBranch", fields: [fromBranchId], references: [id])
  toBranch   Branch @relation("ToBranch", fields: [toBranchId], references: [id])
  requester  User   @relation("TransferRequester", fields: [requesterId], references: [id])
  approver   User?  @relation("TransferApprover", fields: [approverId], references: [id])

  @@map("branch_transfers")
}

model BranchBudget {
  id          String        @id @default(cuid())
  branchId    String
  amount      Float
  period      String        // "monthly", "quarterly", "yearly"
  status      BudgetStatus  @default(PENDING)
  creatorId   String
  approverId  String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  branch   Branch @relation(fields: [branchId], references: [id])
  creator  User   @relation("BudgetCreator", fields: [creatorId], references: [id])
  approver User?  @relation("BudgetApprover", fields: [approverId], references: [id])

  @@map("branch_budgets")
}

model ActivityLog {
  id          String   @id @default(cuid())
  userId      String
  action      String
  entityType  String
  entityId    String
  details     Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("activity_logs")
}

model PurchaseOrder {
  id          String            @id @default(cuid())
  number      String            @unique
  vendor      String
  amount      Float
  status      PurchaseOrderStatus @default(PENDING)
  creatorId   String
  approverId  String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  creator  User   @relation("PurchaseOrderCreator", fields: [creatorId], references: [id])
  approver User?  @relation("PurchaseOrderApprover", fields: [approverId], references: [id])

  @@map("purchase_orders")
}

model SupportTicket {
  id          String        @id @default(cuid())
  customerId  String
  title       String
  description String
  status      TicketStatus  @default(OPEN)
  priority    Priority      @default(MEDIUM)
  category    String
  assigneeId  String?
  creatorId   String?
  resolverId  String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  customer  User?   @relation(fields: [customerId], references: [id])
  assignee  User?   @relation("TicketAssignee", fields: [assigneeId], references: [id])
  creator   User?   @relation("TicketAssigner", fields: [creatorId], references: [id])
  resolver  User?   @relation("TicketResolver", fields: [resolverId], references: [id])
  comments  TicketComment[]
  timeline   TicketTimeline[]

  @@map("support_tickets")
}

model TicketComment {
  id        String   @id @default(cuid())
  ticketId  String
  userId    String
  content   String
  createdAt DateTime @default(now())

  ticket SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user   User          @relation(fields: [userId], references: [id])

  @@map("ticket_comments")
}

model TicketTimeline {
  id          String   @id @default(cuid())
  ticketId    String
  action      String
  description String
  userId      String?
  createdAt   DateTime @default(now())

  ticket SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user   User?         @relation(fields: [userId], references: [id])

  @@map("ticket_timeline")
}

model ServiceEvaluation {
  id          String        @id @default(cuid())
  customerId  String
  serviceId   String
  rating      Int
  comment     String?
  reviewerId  String?
  status      EvaluationStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  customer  User? @relation("EvaluationCustomer", fields: [customerId], references: [id])
  reviewer  User? @relation("EvaluationReviewer", fields: [reviewerId], references: [id])

  @@map("service_evaluations")
}

model Complaint {
  id          String        @id @default(cuid())
  customerId  String
  title       String
  description String
  status      ComplaintStatus @default(OPEN)
  priority    Priority       @default(MEDIUM)
  assigneeId  String?
  creatorId   String?
  resolverId  String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  customer  User?   @relation(fields: [customerId], references: [id])
  assignee  User?   @relation("ComplaintAssignee", fields: [assigneeId], references: [id])
  creator   User?   @relation("ComplaintAssigner", fields: [creatorId], references: [id])
  resolver  User?   @relation("ComplaintResolver", fields: [resolverId], references: [id])
  followUps ComplaintFollowUp[]

  @@map("complaints")
}

model ComplaintFollowUp {
  id          String   @id @default(cuid())
  complaintId String
  userId      String
  action      String
  notes       String?
  createdAt   DateTime @default(now())

  complaint Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id])

  @@map("complaint_follow_ups")
}

model KnowledgeBaseArticle {
  id          String        @id @default(cuid())
  title       String
  content     String
  category    String
  tags        String[]
  status      ArticleStatus @default(DRAFT)
  authorId    String
  reviewerId  String?
  publishedAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  author   User?   @relation("ArticleAuthor", fields: [authorId], references: [id])
  reviewer User?   @relation("ArticleReviewer", fields: [reviewerId], references: [id])
  ratings  KnowledgeBaseRating[]

  @@map("knowledge_base_articles")
}

model KnowledgeBaseRating {
  id          String   @id @default(cuid())
  articleId   String
  userId      String
  rating      Int
  feedback    String?
  createdAt   DateTime @default(now())

  article KnowledgeBaseArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user    User                  @relation(fields: [userId], references: [id])

  @@unique([articleId, userId])
  @@map("knowledge_base_ratings")
}

model CustomerServiceMetric {
  id          String   @id @default(cuid())
  branchId    String
  metric      String
  value       Float
  date        DateTime
  createdAt   DateTime @default(now())

  branch Branch @relation(fields: [branchId], references: [id])

  @@map("customer_service_metrics")
}

model MarketingCampaign {
  id          String            @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  budget      Float
  status      CampaignStatus    @default(PLANNED)
  creatorId   String
  approverId  String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  creator   User             @relation("CampaignCreator", fields: [creatorId], references: [id])
  approver  User?            @relation("CampaignApprover", fields: [approverId], references: [id])
  members   CampaignMember[]
  metrics   MarketingMetric[]

  @@map("marketing_campaigns")
}

model CampaignMember {
  id          String   @id @default(cuid())
  campaignId  String
  userId      String
  role        String
  joinedAt    DateTime @default(now())

  campaign MarketingCampaign @relation("CampaignMemberUser", fields: [campaignId], references: [id])
  user     User              @relation(fields: [userId], references: [id])

  @@unique([campaignId, userId])
  @@map("campaign_members")
}

model Lead {
  id          String      @id @default(cuid())
  name        String
  email       String
  phone       String?
  source      String
  status      LeadStatus  @default(NEW)
  assigneeId  String?
  creatorId   String?
  branchId    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  assignee User?   @relation("LeadAssignee", fields: [assigneeId], references: [id])
  creator  User?   @relation("LeadAssigner", fields: [creatorId], references: [id])
  branch   Branch? @relation(fields: [branchId], references: [id])
  activities LeadActivity[]

  @@map("leads")
}

model LeadActivity {
  id          String   @id @default(cuid())
  leadId      String
  userId      String
  action      String
  notes       String?
  createdAt   DateTime @default(now())

  lead Lead @relation(fields: [leadId], references: [id], onDelete: Cascade)
  user User @relation("LeadActivityUser", fields: [userId], references: [id])

  @@map("lead_activities")
}

model SalesFunnel {
  id          String   @id @default(cuid())
  name        String
  description String?
  stages      Json
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("sales_funnels")
}

model SalesTarget {
  id          String   @id @default(cuid())
  userId      String
  period      String   // "monthly", "quarterly", "yearly"
  target      Float
  achieved     Float    @default(0)
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("sales_targets")
}

model MarketingMetric {
  id          String   @id @default(cuid())
  campaignId  String
  metric      String
  value       Float
  date        DateTime
  createdAt   DateTime @default(now())

  campaign MarketingCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("marketing_metrics")
}

model JournalEntry {
  id          String            @id @default(cuid())
  number      String            @unique
  date        DateTime
  description String
  amount      Float
  type        JournalEntryType
  status      JournalEntryStatus @default(PENDING)
  creatorId   String
  approverId  String?
  branchId    String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  creator  User   @relation("JournalEntryCreator", fields: [creatorId], references: [id])
  approver User?  @relation("JournalEntryApprover", fields: [approverId], references: [id])
  branch   Branch? @relation(fields: [branchId], references: [id])

  @@map("journal_entries")
}

model Employee {
  id          String   @id @default(cuid())
  userId      String   @unique
  position    String
  department  String
  salary      Float
  hireDate    DateTime
  status      String   @default("active")
  branchId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User    @relation("EmployeeRecord", fields: [userId], references: [id])
  branch Branch? @relation(fields: [branchId], references: [id])

  @@map("employees")
}

model PayrollRecord {
  id          String        @id @default(cuid())
  employeeId  String
  period      String        // "monthly", "bi-weekly"
  amount      Float
  status      PayrollStatus @default(PENDING)
  creatorId   String
  approverId  String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id])
  creator  User     @relation("PayrollCreator", fields: [creatorId], references: [id])
  approver User?    @relation("PayrollApprover", fields: [approverId], references: [id])

  @@map("payroll_records")
}

model LeaveRequest {
  id          String       @id @default(cuid())
  employeeId  String
  type        LeaveType
  startDate   DateTime
  endDate     DateTime
  reason      String
  status      LeaveStatus  @default(PENDING)
  approverId  String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt()

  employee Employee @relation(fields: [employeeId], references: [id])
  approver User?    @relation("LeaveApprover", fields: [approverId], references: [id])

  @@map("leave_requests")
}

model PerformanceReview {
  id          String   @id @default(cuid())
  employeeId  String
  reviewerId  String
  period      String   // "monthly", "quarterly", "yearly"
  rating      Int
  comments    String?
  goals       Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  employee User @relation(fields: [employeeId], references: [id])
  reviewer User @relation("PerformanceReviewer", fields: [reviewerId], references: [id])

  @@map("performance_reviews")
}

model Contract {
  id          String         @id @default(cuid())
  number      String         @unique
  type        ContractType
  customerId  String
  vehicleId   String?
  amount      Float
  startDate   DateTime
  endDate     DateTime?
  status      ContractStatus @default(DRAFT)
  creatorId   String
  approverId  String?
  branchId    String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  customer  User     @relation("CustomerContracts", fields: [customerId], references: [id])
  creator   User     @relation("ContractCreator", fields: [creatorId], references: [id])
  approver  User?    @relation("ContractApprover", fields: [approverId], references: [id])
  vehicle   Vehicle? @relation(fields: [vehicleId], references: [id])
  branch    Branch?  @relation(fields: [branchId], references: [id])

  @@map("contracts")
}

model Warranty {
  id          String       @id @default(cuid())
  vehicleId   String
  type        WarrantyType
  startDate   DateTime
  endDate     DateTime
  coverage    String
  status      WarrantyStatus @default(ACTIVE)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt()

  vehicle Vehicle @relation(fields: [vehicleId], references: [id])

  @@map("warranties")
}

model WarrantyClaim {
  id          String            @id @default(cuid())
  customerId  String
  vehicleId   String
  warrantyId  String
  description String
  amount      Float
  status      WarrantyClaimStatus @default(PENDING)
  creatorId   String
  approverId  String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt()

  customer  User     @relation("WarrantyClaimCustomer", fields: [customerId], references: [id])
  creator   User     @relation("WarrantyClaimCreator", fields: [creatorId], references: [id])
  approver  User?    @relation("WarrantyClaimApprover", fields: [approverId], references: [id])
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])
  warranty  Warranty @relation(fields: [warrantyId], references: [id])

  @@map("warranty_claims")
}

model MaintenanceSchedule {
  id          String                @id @default(cuid())
  vehicleId   String
  type        MaintenanceType
  description String
  dueDate     DateTime
  status      MaintenanceStatus     @default(SCHEDULED)
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt()

  vehicle Vehicle @relation(fields: [vehicleId], references: [id])

  @@map("maintenance_schedules")
}

model MaintenanceRecord {
  id          String                @id @default(cuid())
  vehicleId   String
  type        MaintenanceType
  description String
  cost        Float
  performedAt DateTime
  technician  String?
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt()

  vehicle Vehicle @relation(fields: [vehicleId], references: [id])

  @@map("maintenance_records")
}

model MaintenanceReminder {
  id          String                @id @default(cuid())
  vehicleId   String
  type        MaintenanceType
  dueDate     DateTime
  message     String
  isSent      Boolean               @default(false)
  sentAt      DateTime?
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt()

  vehicle Vehicle @relation(fields: [vehicleId], references: [id])

  @@map("maintenance_reminders")
}

model MaintenancePart {
  id          String   @id @default(cuid())
  name        String
  description String?
  partNumber  String?
  cost        Float
  stock       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()

  @@map("maintenance_parts")
}

model InsuranceCompany {
  id          String   @id @default(cuid())
  name        String
  contact     String?
  email       String?
  phone       String?
  address     String?
  branchId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()

  branch Branch? @relation(fields: [branchId], references: [id])

  @@map("insurance_companies")
}

model InsurancePolicy {
  id          String             @id @default(cuid())
  customerId  String
  vehicleId   String?
  companyId   String
  type        InsuranceType
  policyNumber String
  startDate   DateTime
  endDate     DateTime
  premium     Float
  coverage    Json
  status      InsuranceStatus    @default(ACTIVE)
  creatorId   String
  approverId  String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt()

  customer  User     @relation("CustomerInsurancePolicies", fields: [customerId], references: [id])
  vehicle   Vehicle? @relation(fields: [vehicleId], references: [id])
  company   InsuranceCompany @relation(fields: [companyId], references: [id])
  creator   User     @relation("InsurancePolicyCreator", fields: [creatorId], references: [id])
  approver  User?    @relation("InsurancePolicyApprover", fields: [approverId], references: [id])

  @@map("insurance_policies")
}

model InsuranceClaim {
  id          String              @id @default(cuid())
  customerId  String
  vehicleId   String?
  policyId    String
  type        ClaimType
  description String
  amount      Float
  status      ClaimStatus         @default(PENDING)
  creatorId   String
  assigneeId  String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt()

  customer  User     @relation("CustomerInsuranceClaims", fields: [customerId], references: [id])
  vehicle   Vehicle? @relation(fields: [vehicleId], references: [id])
  policy   InsurancePolicy @relation(fields: [policyId], references: [id])
  creator  User     @relation("InsuranceClaimCreator", fields: [creatorId], references: [id])
  assignee User?    @relation("InsuranceClaimAssignee", fields: [assigneeId], references: [id])

  @@map("insurance_claims")
}

model InsurancePayment {
  id          String              @id @default(cuid())
  policyId    String
  amount      Float
  dueDate     DateTime
  paidDate    DateTime?
  status      PaymentStatus       @default(PENDING)
  creatorId   String
  approverId  String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt()

  policy   InsurancePolicy @relation(fields: [policyId], references: [id])
  creator  User           @relation("InsurancePaymentCreator", fields: [creatorId], references: [id])
  approver User?          @relation("InsurancePaymentApprover", fields: [approverId], references: [id])

  @@map("insurance_payments")
}

model TaxRecord {
  id          String        @id @default(cuid())
  type        TaxType
  period      String        // "monthly", "quarterly", "yearly"
  amount      Float
  dueDate     DateTime
  paidDate    DateTime?
  status      TaxStatus     @default(PENDING)
  creatorId   String
  approverId  String?
  branchId    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt()

  creator  User   @relation("TaxRecordCreator", fields: [creatorId], references: [id])
  approver User?  @relation("TaxRecordApprover", fields: [approverId], references: [id])
  branch   Branch? @relation(fields: [branchId], references: [id])

  @@map("tax_records")
}

model Product {
  id          String        @id @default(cuid())
  name        String
  description String?
  price       Float
  category    String
  stock       Int           @default(0)
  isActive    Boolean       @default(true)
  creatorId   String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt()

  creator User          @relation("ProductCreator", fields: [creatorId], references: [id])
  reviews ProductReview[]

  @@map("products")
}

model Order {
  id          String        @id @default(cuid())
  customerId  String
  items       Json
  total       Float
  status      OrderStatus   @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt()

  customer User @relation("OrderCustomer", fields: [customerId], references: [id])

  @@map("orders")
}

model ProductReview {
  id          String   @id @default(cuid())
  customerId  String
  productId   String
  rating      Int
  comment     String?
  status      String   @default("pending")
  approverId  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()

  customer  User    @relation("ProductReviewCustomer", fields: [customerId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
  approver  User?   @relation("ProductReviewApprover", fields: [approverId], references: [id])

  @@unique([customerId, productId])
  @@map("product_reviews")
}

model Promotion {
  id          String        @id @default(cuid())
  name        String
  description String?
  type        PromotionType
  value       Float
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean       @default(true)
  creatorId   String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt()

  creator User @relation("PromotionCreator", fields: [creatorId], references: [id])

  @@map("promotions")
}

model InventoryItem {
  id          String   @id @default(cuid())
  name        String
  description String?
  quantity    Int
  unit        String
  location    String?
  branchId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()

  branch Branch? @relation(fields: [branchId], references: [id])

  @@map("inventory_items")
}

model Warehouse {
  id          String   @id @default(cuid())
  name        String
  address     String?
  branchId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()

  branch Branch? @relation(fields: [branchId], references: [id])

  @@map("warehouses")
}

model Payment {
  id          String        @id @default(cuid())
  bookingId   String?
  amount      Float
  currency    String        @default("EGP")
  method      PaymentMethod
  status      PaymentStatus @default(PENDING)
  transactionId String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt()

  booking ServiceBooking? @relation(fields: [bookingId], references: [id])

  @@map("payments")
}

model Opportunity {
  id          String           @id @default(cuid())
  vehicleId   String
  customerId  String?
  title       String
  description String?
  value       Float
  status      OpportunityStatus @default(NEW)
  stage       String
  expectedCloseDate DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt()

  vehicle  Vehicle? @relation(fields: [vehicleId], references: [id])
  customer User?   @relation(fields: [customerId], references: [id])

  @@map("opportunities")
}

// Enums
enum UserRole {
  CUSTOMER
  STAFF
  ADMIN
  SUPER_ADMIN
}

enum CustomerSegment {
  CUSTOMER
  VIP
  CORPORATE
  DEALER
}

enum VehicleCategory {
  SEDAN
  SUV
  HATCHBACK
  TRUCK
  VAN
  ELECTRIC
  HYBRID
  LUXURY
  COMMERCIAL
}

enum FuelType {
  PETROL
  DIESEL
  ELECTRIC
  HYBRID
  CNG
}

enum TransmissionType {
  MANUAL
  AUTOMATIC
  CVT
  DCT
}

enum VehicleStatus {
  AVAILABLE
  SOLD
  RESERVED
  MAINTENANCE
  DAMAGED
  OUT_OF_SERVICE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIAL
}

enum ServiceCategory {
  MAINTENANCE
  REPAIR
  INSPECTION
  DETAILING
  CUSTOM
}

enum PermissionCategory {
  USER_MANAGEMENT
  VEHICLE_MANAGEMENT
  BOOKING_MANAGEMENT
  FINANCIAL_MANAGEMENT
  REPORTING
  SYSTEM_ADMINISTRATION
  CUSTOMER_SERVICE
  MARKETING
  SALES
  INVENTORY
  HR_MANAGEMENT
}

enum LogSeverity {
  DEBUG
  INFO
  WARNING
  ERROR
  CRITICAL
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum BookingType {
  TEST_DRIVE
  SERVICE
  CONSULTATION
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
  PARTIAL
}

enum QuotationStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum TransactionType {
  SALE
  PAYMENT
  REFUND
  EXPENSE
  TRANSFER
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum InteractionType {
  CALL
  EMAIL
  MEETING
  VISIT
  SOCIAL_MEDIA
}

enum TransferStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum BudgetStatus {
  PENDING
  APPROVED
  REJECTED
  ACTIVE
  CLOSED
}

enum PurchaseOrderStatus {
  PENDING
  APPROVED
  REJECTED
  ORDERED
  DELIVERED
  CANCELLED
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  REOPENED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum EvaluationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ComplaintStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  ESCALATED
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum CampaignStatus {
  PLANNED
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  CLOSED_WON
  CLOSED_LOST
}

enum JournalEntryType {
  DEBIT
  CREDIT
}

enum JournalEntryStatus {
  PENDING
  APPROVED
  REJECTED
  POSTED
}

enum PayrollStatus {
  PENDING
  APPROVED
  PROCESSED
  PAID
}

enum LeaveType {
  VACATION
  SICK
  PERSONAL
  MATERNITY
  PATERNITY
  UNPAID
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum ContractType {
  SALES
  LEASE
  SERVICE
  EMPLOYMENT
  PARTNERSHIP
}

enum ContractStatus {
  DRAFT
  ACTIVE
  EXPIRED
  TERMINATED
  RENEWED
}

enum WarrantyType {
  BASIC
  EXTENDED
  POWERTRAIN
  BUMPER_TO_BUMPER
  CORROSION
}

enum WarrantyStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  TRANSFERRED
}

enum WarrantyClaimStatus {
  PENDING
  APPROVED
  REJECTED
  IN_PROGRESS
  COMPLETED
}

enum MaintenanceType {
  ROUTINE
  REPAIR
  INSPECTION
  DIAGNOSTIC
  UPGRADE
}

enum MaintenanceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  OVERDUE
}

enum InsuranceType {
  LIABILITY
  COMPREHENSIVE
  COLLISION
  UNINSURED_MOTORIST
  PERSONAL_INJURY
}

enum InsuranceStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  LAPSED
  SUSPENDED
}

enum ClaimType {
  COLLISION
  COMPREHENSIVE
  LIABILITY
  PERSONAL_INJURY
  PROPERTY_DAMAGE
}

enum ClaimStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  IN_PROGRESS
  COMPLETED
  CLOSED
}

enum TaxType {
  INCOME
  SALES
  PROPERTY
  PAYROLL
  VAT
  CORPORATE
}

enum TaxStatus {
  PENDING
  FILED
  PAID
  OVERDUE
  UNDER_REVIEW
  ASSESSED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PromotionType {
  PERCENTAGE
  FIXED_AMOUNT
  BOGO
  FREE_SHIPPING
  CASHBACK
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  MOBILE_PAYMENT
  CRYPTOCURRENCY
}

enum OpportunityStatus {
  NEW
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  CLOSED_WON
  CLOSED_LOST
  ON_HOLD
}