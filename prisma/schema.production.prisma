generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Include all models from the main schema but with PostgreSQL compatibility
model SecurityLog {
  id        String      @id @default(cuid())
  userId    String?
  action    String
  ipAddress String?
  userAgent String?
  details   Json?
  severity  LogSeverity @default(INFO)
  createdAt DateTime    @default(now())

  @@map("security_logs")
}

model User {
  id                String          @id @default(cuid())
  email             String          @unique
  password          String?
  name              String?
  role              UserRole        @default(CUSTOMER)
  phone             String?
  isActive          Boolean         @default(true)
  emailVerified     Boolean         @default(false)
  lastLoginAt       DateTime?
  securitySettings  Json?
  segment           CustomerSegment @default(CUSTOMER)
  status            String          @default("active")
  branchId          String?
  roleTemplateId    String?
  customPermissions Json?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  productReviews      ProductReview[]    @relation("ProductReviewCustomer")
  approvedReviews      ProductReview[]    @relation("ProductReviewApprover")
  customerContracts    Contract[]         @relation("CustomerContracts")
  createdContracts     Contract[]         @relation("ContractCreator")
  approvedContracts    Contract[]         @relation("ContractApprover")

  @@index([email])
  @@index([role])
  @@index([isActive])
  @@index([branchId])
  @@map("users")
}

model Branch {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  address     String?
  phone       String?
  email       String?
  managerId   String?  @unique
  isActive    Boolean  @default(true)
  openingDate DateTime
  currency    String   @default("EGP")
  timezone    String   @default("Africa/Cairo")
  settings    Json?
  contracts   Contract[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([code])
  @@index([isActive])
  @@map("branches")
}

model Vehicle {
  id           String           @id @default(cuid())
  make         String
  model        String
  year         Int
  price        Float
  stockNumber  String           @unique
  vin          String?          @unique
  description  String?
  category     VehicleCategory
  fuelType     FuelType
  transmission TransmissionType
  mileage      Int?
  color        String?
  status       VehicleStatus    @default(AVAILABLE)
  featured     Boolean          @default(false)
  branchId     String?
  contracts    Contract[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@index([make, model])
  @@index([status])
  @@index([category])
  @@map("vehicles")
}

model VehicleImage {
  id        String   @id @default(cuid())
  vehicleId String
  imageUrl  String
  altText   String?
  isPrimary Boolean  @default(false)
  order     Int      @default(0)
  createdAt DateTime @default(now())

  @@map("vehicle_images")
}

model VehicleSpecification {
  id        String              @id @default(cuid())
  vehicleId String
  key       String
  label     String
  value     String
  category  VehicleSpecCategory @default(ENGINE)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@map("vehicle_specifications")
}

model VehiclePricing {
  id                 String    @id @default(cuid())
  vehicleId          String    @unique
  basePrice          Float
  discountPrice      Float?
  discountPercentage Float?
  taxes              Float     @default(0)
  fees               Float     @default(0)
  totalPrice         Float
  currency           String    @default("SAR")
  hasDiscount        Boolean   @default(false)
  discountExpires    DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@map("vehicle_pricing")
}

model TestDriveBooking {
  id         String        @id @default(cuid())
  customerId String
  vehicleId  String
  date       DateTime
  timeSlot   String
  status     BookingStatus @default(PENDING)
  notes      String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@map("test_drive_bookings")
}

model ServiceType {
  id          String          @id @default(cuid())
  name        String
  description String?
  duration    Int
  price       Float?
  category    ServiceCategory
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@map("service_types")
}

model ServiceBooking {
  id            String        @id @default(cuid())
  customerId    String
  vehicleId     String?
  serviceTypeId String
  timeSlotId    String?
  date          DateTime
  timeSlot      String
  status        BookingStatus @default(PENDING)
  notes         String?
  totalPrice    Float?
  paymentStatus PaymentStatus @default(PENDING)
  paymentId     String?
  reminderSent  Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("service_bookings")
}

model Permission {
  id          String             @id @default(cuid())
  name        String             @unique
  description String?
  category    PermissionCategory
  isActive    Boolean            @default(true)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@map("permissions")
}

model RoleTemplate {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  role        UserRole
  permissions Json
  isActive    Boolean  @default(true)
  isSystem    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("role_templates")
}

model RoleTemplatePermission {
  id           String   @id @default(cuid())
  templateId   String
  permissionId String
  createdAt    DateTime @default(now())

  @@unique([templateId, permissionId])
  @@map("role_template_permissions")
}

model UserPermission {
  id           String    @id @default(cuid())
  userId       String
  permissionId String
  grantedBy    String?
  grantedAt    DateTime  @default(now())
  expiresAt    DateTime?

  @@unique([userId, permissionId], name: "userId_permissionId")
  @@map("user_permissions")
}

model Payment {
  id            String        @id @default(cuid())
  bookingId     String
  bookingType   BookingType
  amount        Float
  currency      String        @default("EGP")
  status        PaymentStatus @default(PENDING)
  paymentMethod PaymentMethod
  transactionId String?
  receiptUrl    String?
  notes         String?
  branchId      String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("payments")
}

model TimeSlot {
  id          String   @id @default(cuid())
  dayOfWeek   Int
  startTime   String
  endTime     String
  maxBookings Int      @default(1)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("time_slots")
}

model Holiday {
  id          String   @id @default(cuid())
  date        DateTime
  name        String
  description String?
  isRecurring Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("holidays")
}

model Notification {
  id        String              @id @default(cuid())
  userId    String?
  type      NotificationType
  title     String
  message   String
  status    NotificationStatus  @default(PENDING)
  channel   NotificationChannel
  recipient String
  sentAt    DateTime?
  readAt    DateTime?
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@map("notifications")
}

model EmailTemplate {
  id        String            @id @default(cuid())
  name      String            @unique
  subject   String
  content   String
  type      EmailTemplateType
  isActive  Boolean           @default(true)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@map("email_templates")
}

model Task {
  id             String       @id @default(cuid())
  title          String
  description    String?
  priority       TaskPriority @default(MEDIUM)
  status         TaskStatus   @default(PENDING)
  dueDate        DateTime?
  assignedTo     String
  assignedBy     String?
  customerId     String?
  bookingId      String?
  notes          String?
  estimatedHours Int          @default(0)
  actualHours    Int          @default(0)
  tags           Json?
  attachments    Json?
  completedAt    DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("tasks")
}

model TaskComment {
  id        String   @id @default(cuid())
  taskId    String
  authorId  String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("task_comments")
}

model Booking {
  id            String        @id @default(cuid())
  type          BookingType
  customerId    String
  vehicleId     String?
  serviceTypeId String?
  date          DateTime
  timeSlot      String
  status        BookingStatus @default(PENDING)
  notes         String?
  totalPrice    Float?
  paymentStatus PaymentStatus @default(PENDING)
  paymentId     String?
  reminderSent  Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([date, status])
  @@index([customerId])
  @@map("bookings")
}

model CalendarEvent {
  id               String            @id @default(cuid())
  title            String
  description      String?
  startTime        DateTime
  endTime          DateTime
  type             CalendarEventType
  status           EventStatus       @default(SCHEDULED)
  location         String?
  attendees        Json
  bookingId        String?
  taskId           String?
  notes            String?
  isRecurring      Boolean           @default(false)
  recurringPattern String?
  meetingLink      String?
  attachments      Json?
  reminders        Json?
  organizerId      String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@map("calendar_events")
}

model PerformanceMetric {
  id                   String            @id @default(cuid())
  employeeId           String
  period               PerformancePeriod
  bookingsHandled      Int
  averageHandlingTime  Float
  customerRating       Float
  conversionRate       Float
  revenueGenerated     Float
  tasksCompleted       Int
  customerSatisfaction Float
  responseTime         Float
  followUpRate         Float
  upsellSuccess        Float
  notes                String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt

  @@unique([employeeId, period])
  @@map("performance_metrics")
}

model PageSEO {
  id                 String    @id @default(cuid())
  pagePath           String    @unique
  title              String?
  description        String?
  keywords           String?
  ogImage            String?
  ogTitle            String?
  ogDescription      String?
  twitterCard        String?
  twitterTitle       String?
  twitterDescription String?
  canonicalUrl       String?
  noIndex            Boolean   @default(false)
  noFollow           Boolean   @default(false)
  structuredData     Json?
  customMeta         Json?
  hreflang           Json?
  priority           Float     @default(0.5)
  changeFreq         String    @default("weekly")
  lastMod            DateTime?
  isActive           Boolean   @default(true)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@map("page_seo")
}

model SiteSettings {
  id                  String   @id @default(cuid())
  logoUrl             String?
  faviconUrl          String?
  primaryColor        String   @default("#3B82F6")
  secondaryColor      String   @default("#10B981")
  accentColor         String   @default("#F59E0B")
  fontFamily          String   @default("Inter")
  siteTitle           String
  siteDescription     String
  contactEmail        String
  contactPhone        String?
  contactAddress      String?
  workingHours        String?
  socialLinks         Json?
  seoSettings         Json?
  performanceSettings Json?
  headerSettings      Json?
  footerSettings      Json?
  isActive            Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("site_settings")
}

model FooterContent {
  id             String   @id @default(cuid())
  logoUrl        String?
  logoText       String?
  tagline        String?
  primaryPhone   String?
  secondaryPhone String?
  primaryEmail   String?
  secondaryEmail String?
  address        String?
  workingHours   String?
  copyrightText  String?
  newsletterText String?
  backToTopText  String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("footer_content")
}

model FooterSocial {
  id        String   @id @default(cuid())
  facebook  String?
  twitter   String?
  instagram String?
  linkedin  String?
  youtube   String?
  tiktok    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("footer_social")
}

model FooterColumn {
  id        String           @id @default(cuid())
  title     String
  content   String
  order     Int
  isVisible Boolean          @default(true)
  type      FooterColumnType
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@map("footer_columns")
}

model HeaderContent {
  id             String   @id @default(cuid())
  logoUrl        String?
  logoText       String?
  tagline        String?
  primaryPhone   String?
  secondaryPhone String?
  primaryEmail   String?
  secondaryEmail String?
  address        String?
  workingHours   String?
  ctaButton      Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("header_content")
}

model HeaderSocial {
  id        String   @id @default(cuid())
  facebook  String?
  twitter   String?
  instagram String?
  linkedin  String?
  youtube   String?
  tiktok    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("header_social")
}

model HeaderNavigation {
  id        String   @id @default(cuid())
  label     String
  href      String
  order     Int
  isVisible Boolean  @default(true)
  parentId  String?
  children  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("header_navigation")
}

model Slider {
  id          String   @id @default(cuid())
  title       String
  subtitle    String?
  description String?
  imageUrl    String
  ctaText     String?
  ctaLink     String?
  badge       String?
  badgeColor  String?  @default("bg-blue-500")
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  @@map("sliders")
}

model CompanyInfo {
  id          String   @id @default(cuid())
  title       String
  subtitle    String?
  description String?
  imageUrl    String?
  features    Json?
  ctaButtons  Json?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  @@map("company_info")
}

model ServiceItem {
  id          String   @id @default(cuid())
  title       String
  description String?
  icon        String?
  link        String?
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  @@map("service_items")
}

model TimelineEvent {
  id          String   @id @default(cuid())
  year        String
  title       String
  description String?
  icon        String?
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  @@map("timeline_events")
}

model PopupConfig {
  id          String   @id @default(cuid())
  title       String
  content     String?
  imageUrl    String?
  ctaText     String?
  ctaLink     String?
  isActive    Boolean  @default(true)
  showDelay   Int      @default(5000)
  autoClose   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  @@map("popup_configs")
}

model MaintenancePartToMaintenanceRecord {
  A String
  B String

  @@id([A, B])
  @@map("maintenance_part_to_maintenance_record")
}

model TicketArticles {
  A String
  B String

  @@id([A, B])
  @@map("ticket_articles")
}

// Enums
enum LogSeverity {
  INFO
  WARNING
  ERROR
  CRITICAL
}

enum UserRole {
  CUSTOMER
  STAFF
  BRANCH_MANAGER
  ADMIN
  SUPER_ADMIN
}

enum CustomerSegment {
  CUSTOMER
  VIP
  CORPORATE
  GOVERNMENT
}

enum VehicleCategory {
  CAR
  TRUCK
  BUS
  MOTORCYCLE
  VAN
  PICKUP
  TRAILER
  SPECIAL
}

enum FuelType {
  GASOLINE
  DIESEL
  ELECTRIC
  HYBRID
  LPG
  CNG
}

enum TransmissionType {
  MANUAL
  AUTOMATIC
  CVT
  DSG
  SEMI_AUTOMATIC
}

enum VehicleStatus {
  AVAILABLE
  SOLD
  RESERVED
  MAINTENANCE
  OUT_OF_STOCK
  DISCONTINUED
}

enum VehicleSpecCategory {
  ENGINE
  TRANSMISSION
  EXTERIOR
  INTERIOR
  SAFETY
  PERFORMANCE
  DIMENSIONS
  FEATURES
}

enum ServiceCategory {
  MAINTENANCE
  REPAIR
  INSPECTION
  DETAILING
  CUSTOMIZATION
  EMERGENCY
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIALLY_PAID
  REFUNDED
  FAILED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  MOBILE_PAYMENT
  CRYPTOCURRENCY
  FINANCING
}

enum PermissionCategory {
  USER_MANAGEMENT
  VEHICLE_MANAGEMENT
  BOOKING_MANAGEMENT
  INVENTORY_MANAGEMENT
  FINANCIAL_MANAGEMENT
  REPORTING
  SYSTEM_ADMINISTRATION
  CUSTOMER_RELATIONS
}

enum NotificationType {
  BOOKING_CONFIRMATION
  BOOKING_REMINDER
  PAYMENT_RECEIVED
  PAYMENT_FAILED
  SERVICE_COMPLETED
  PROMOTION
  SYSTEM_ANNOUNCEMENT
  SECURITY_ALERT
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  READ
  FAILED
}

enum NotificationChannel {
  EMAIL
  SMS
  PUSH_NOTIFICATION
  IN_APP
  WHATSAPP
}

enum EmailTemplateType {
  BOOKING_CONFIRMATION
  BOOKING_REMINDER
  PAYMENT_RECEIPT
  WELCOME_EMAIL
  PASSWORD_RESET
  PROMOTIONAL
  NEWSLETTER
  SUPPORT_REPLY
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
  CRITICAL
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
  REJECTED
}

enum BookingType {
  TEST_DRIVE
  SERVICE_APPOINTMENT
  CONSULTATION
  DELIVERY
  MAINTENANCE
  REPAIR
}

enum CalendarEventType {
  MEETING
  APPOINTMENT
  TASK
  REMINDER
  AVAILABILITY
  BLOCKED_TIME
}

enum EventStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  POSTPONED
}

enum PerformancePeriod {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum FooterColumnType {
  LINKS
  CONTACT
  SOCIAL
  LEGAL
  CUSTOM
}

enum ProductReview {
  // This will be defined if needed
}

enum Contract {
  // This will be defined if needed
}